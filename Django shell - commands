# Команды в Django Shell

---------------------------

# 0. Начало работы в терминале после создания модели в models:

py manage.py makemigrations

py manage.py migrate

py manage.py shell

from news.models import *

--------------------------

# 1. Создать двух пользователей (с помощью метода User.objects.create_user).

user1 = User.objects.create_user(username='Sil', first_name='Silvio', last_name='Dante')
user2 = User.objects.create_user(username='Tony', first_name='Antony', last_name='Soprano')

--------------------------

# 2. Создать два объекта модели Author, связанные с пользователями.

Author.objects.create(authorUser=user1)
Author.objects.create(authorUser=user2)

author1 = Author.objects.get(id=1)
author2 = Author.objects.get(id=2)

-------------------------

# 3. Добавить 4 категории в модель Category.

Category.objects.create(categoryName = "IT")
Category.objects.create(categoryName = "Education")
Category.objects.create(categoryName = "FinTech")
Category.objects.create(categoryName = "Sport")

-------------------------

# 4. Добавить 2 статьи и 1 новость.

Post.objects.create(author=author1, categoryType='NW', postTitle='New Data Base', postText='Database is an organized collection of data stored and accessed electronically from a computer system. Where databases are more complex they are often developed using formal design and modeling techniques.')

Post.objects.create(author=author1, categoryType='AR', postTitle='Big Data', postText='Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.')

Post.objects.create(author=author2, categoryType='AR', postTitle='Реляционные базы данных', postText='Nisl pretium fusce id velit ut tortor pretium. Posuere lorem ipsum dolor sit.Enim nunc faucibus a pellentesque. Diam in arcu cursus euismod quis viverra nibh cras pulvinar. Vitae tortor condimentum lacinia quis. Turpis nunc eget lorem dolor sed viverra ipsum nunc.')

-------------------------


# 5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
-- Добавляем категорию
Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))
Post.objects.get(id=1).postCategory.add(Category.objects.get(id=2))
Post.objects.get(id=1).postCategory.add(Category.objects.get(id=3))

Post.objects.get(id=2).postCategory.add(Category.objects.get(id=1))
Post.objects.get(id=2).postCategory.add(Category.objects.get(id=2))

Post.objects.get(id=3).postCategory.add(Category.objects.get(id=2))
Post.objects.get(id=3).postCategory.add(Category.objects.get(id=3))

------------------


# 6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
-- Добавляем комментарий
Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, commentText="It's amazing")
Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=2).authorUser, commentText="Cool!")
Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=2).authorUser, commentText="Awesome")
Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=1).authorUser, commentText="Good Job!")
Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=2).authorUser, commentText="Nice!")
-- Проверяем:
Comment.objects.get(id=1)
Comment.objects.get(id=1).commentText

------------------

# 7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

-- Применим метод like (т.к. это метод - обязательно скобочки):
Post.objects.get(id=1).like()
Post.objects.get(id=1).like()
Post.objects.get(id=2).like()
Post.objects.get(id=2).like()
Post.objects.get(id=3).like()
Post.objects.get(id=3).like()
Post.objects.get(id=3).like()

Comment.objects.get(id=1).like()
Comment.objects.get(id=2).like()
Comment.objects.get(id=3).like()
Comment.objects.get(id=4).like()
Comment.objects.get(id=5).like()

-- Выведим рейтинг:
Comment.objects.get(id=1).rating
-- 1

-- Применим метод dislike 3 раза:
Comment.objects.get(id=1).dislike()
Comment.objects.get(id=1).dislike()
Comment.objects.get(id=1).dislike()
Comment.objects.get(id=3).dislike()
Comment.objects.get(id=3).dislike()
Comment.objects.get(id=3).dislike()
Post.objects.get(id=1).dislike()

-- Выведим рейтинг:
Comment.objects.get(id=1).rating
-- -2
Comment.objects.get(id=3).rating
-- 0

------------------

# 8. Обновить рейтинги пользователей.
-- Возьмём автора и посмотрим его рейтинг:

author1 = Author.objects.get(id=1)
author1.update_rating()
author1.authorRating
5

author2 = Author.objects.get(id=2)
author2.update_rating()
author2.authorRating
11

-------------------------

# 9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

-- Выводим рейтинг и username через индексы:
a = Author.objects.order_by('-authorRating')[:1]
a
<QuerySet [<Author: Author object (2)>]>
>>> a[0].authorUser.username
'Tony'
>>> a[0].authorRating
11

или так

-- Выводим рейтинг и username лучшего автора через цикл for:
a = Author.objects.order_by('authorRating')[:1]
for i in a:
    i.authorRating
    i.authorUser.username
11
'Tony'

--------------------------

# 10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

-- Находим лучшую статью:
p = Post.objects.order_by('-rating')[:1]
p
<QuerySet [<Post: Post object (3)>]>

-- Выводим через цикл for:
for i in p:
    i.pubDate
    i.author.authorUser.username
    i.rating
    i.postTitle
    i.preview()

-- или через индекс:
p[0].pubDate
p[0].author.authorUser.username
p[0].rating
p[0].postTitle
p[0].preview()

--------------------------------

# 11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

-- Выводим всё выше перечисленное отсортировав по уровню рейтинга:

Comment.objects.all().order_by('-rating').values('pubDate', 'commentUser', 'rating', 'commentText')


